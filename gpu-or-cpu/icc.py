# -*- coding: utf-8 -*-
"""ICC.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1R5zBJdoYODRdTWUpKY-BsuDMujVYOyfN
"""

## Salvador Donayre - UTEC
## Solución Sesión 2 - Introd. Ciencia de la Computación

from numba import jit, njit, cuda
import numpy, time

# Procesando 10000000000 (10 ** 10) elementos de ceros y unos

# Lista de números (Original)
# Problema original
@njit(target_backend='cuda')
def execute_num():
  values = [0 for i in range(10 ** 10)]
  # Si el elemento es 0, reasignarlo a 1
  values[values == 0] = 1



# Lista de booleanos
# Reemplazado los ceros y unos por booleanos para mayor optimización
@njit(target_backend='cuda')
def execute_bool():
  values = [False for i in range(10 ** 10)]
  # Si el elemento es falso, reasignarlo a verdadero
  values[values == False] = True



# Lista de booleanos (Numpy)
# Implementación con Numpy.empty()
@jit(target_backend='cuda', forceobj=True)
def execute_bool_numpy():
  values = numpy.empty(shape=10 ** 10, dtype=numpy.bool_)
  values.fill(True)



# Lista de booleanos (CUDA)
# Implementación con arrays de CUDA
@jit(target_backend='cuda', forceobj=True)
def execute_bool_cuda():
  values = cuda.device_array(shape=10 ** 10, dtype=numpy.bool_)
  values[values == False] = True



## Lógica para mostrar datos

# Diccionario de casos
dict_cases = {}

def run_with_time(title, func):
  start = time.time()
  func()
  end = time.time() - start

  # No es la mejor idea identificarlo por el título
  cases = dict_cases.get(title, [])
  if len(cases) == 0:
    dict_cases[title] = cases
  cases.append(end)

  print("-", title, end)


loop = 10
print("-" * 40)
for i in range(loop):
  start = time.time()
  if i > 0:
    print()

  print(f"Iteración #{i + 1}")
  #run_with_time("Lista de números:", execute_num)
  #run_with_time("Lista de booleanos:", execute_bool)
  run_with_time("Lista de booleanos (Numpy.empty):", execute_bool_numpy)
  run_with_time("Lista de booleanos (CUDA):", execute_bool_cuda)

  end = time.time() - start
  print("Procesado en:", end)
print("-" * 40)

for i in range(10):
  print()

for k, v in dict_cases.items():
  v.sort()
  print(k)
  print(f"- Mejor caso: {v[0]:.3} segundos")
  print(f"- Promedio: {sum(v) / len(v):.3} segundos")
  print(f"- Peor caso: {v[len(v) - 1]:.3} segundos")
  print()
print("N. de repeticiones:", loop)